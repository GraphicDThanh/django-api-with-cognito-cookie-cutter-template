# Generated by Django 5.0.8 on 2024-08-15 07:45

import uuid

import django.core.validators
import django.utils.timezone
import django_extensions.db.fields
from django.db import migrations
from django.db import models

import django_app.users.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this user should be treated as active."
                            "Unselect this instead of deleting accounts."
                        ),
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ("cognito_sub", models.UUIDField(help_text="User cognito sub value (uuid)")),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("dob", models.DateField(help_text="Date of birth", null=True, verbose_name="Date of birth")),
                ("street_line_1", models.CharField(blank=True, help_text="First line of an address.", max_length=255)),
                (
                    "street_line_2",
                    models.CharField(blank=True, help_text="Optional. Second line of an address.", max_length=255),
                ),
                ("city", models.CharField(blank=True, help_text="City of an address.", max_length=255)),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="State. For US addresses, two letters representing the state.",
                        max_length=2,
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Postal code. We can use the format '12345' or '12345-6789' for extended ZIP codes.",
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_postal_code",
                                message="Postal code must be entered in the format: '12345' or '12345-6789'.",
                                regex="^[0-9]{5}(?:-[0-9]{4})?$",
                            ),
                        ],
                    ),
                ),
                (
                    "country",
                    models.CharField(blank=True, help_text="Two letters representing a country.", max_length=2),
                ),
                (
                    "phone_country_code",
                    models.CharField(
                        blank=True,
                        help_text="Country code (e.g. 1).",
                        max_length=5,
                        verbose_name="Phone country code",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number (e.g. 1234567890).",
                        max_length=20,
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("cisMale", "CISMALE"),
                            ("cisFemale", "CISFEMALE"),
                            ("transgenderMale", "TRANSGENDERMALE"),
                            ("transgenderFemale", "TRANSGENDERFEMALE"),
                            ("nonBinary", "NONBINARY"),
                            ("none", "NONE"),
                            ("unspecified", "UNSPECIFIED"),
                            ("other", "OTHER"),
                            ("unknown", "UNKNOWN"),
                            ("declinedToAnswer", "DECLINEDTOANSWER"),
                        ],
                        default="declinedToAnswer",
                        help_text="User's gender",
                        max_length=50,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "assigned_sex",
                    models.CharField(
                        choices=[
                            ("male", "MALE"),
                            ("female", "FEMALE"),
                            ("unspecified", "UNSPECIFIED"),
                            ("none", "NONE"),
                            ("other", "OTHER"),
                            ("unknown", "UNKNOWN"),
                            ("declinedToAnswer", "DECLINEDTOANSWER"),
                        ],
                        default="declinedToAnswer",
                        help_text="User's assigned sex",
                        max_length=50,
                        verbose_name="Assigned Sex",
                    ),
                ),
                (
                    "race",
                    models.CharField(
                        choices=[
                            ("American Indian or Alaska Native", "AMERICANINDIANORALASKANATIVE"),
                            ("Asian", "ASIAN"),
                            ("Black or African American", "BLACKORAFRICANAMERICAN"),
                            ("Native Hawaiian or other Pacific Islander", "NATIVEHAWAIIANOROTHERPACIFICISLANDER"),
                            ("Hispatic or Latino", "HISPATICORLATINO"),
                            ("White", "WHITE"),
                            ("Other", "OTHER"),
                            ("Declined To Answer", "DECLINEDTOANSWER"),
                        ],
                        default="Declined To Answer",
                        help_text="User's race",
                        max_length=50,
                        verbose_name="Race",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. "
                            "A user will get all permissions granted to each of their groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django_app.users.managers.UserManager()),
            ],
        ),
    ]
